{"version":3,"sources":["components/Header/terminal.jpg","utils/API.js","components/Employee/index.js","components/SearchBox/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","get","Employee","props","className","onClick","sortName","employee","map","result","key","login","uuid","src","picture","large","alt","name","first","last","cell","href","email","format","dob","date","SearchBox","onChange","handleInputChange","type","placeholder","Header","terminal","width","height","App","state","employees","filteredEmployees","order","event","UserInput","target","value","filter","toLowerCase","indexOf","console","log","setState","filtereds","sorteds","sort","a","b","API","then","res","data","results","catch","err","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.afd2df7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/terminal.85b303fa.jpg\";","import axios from \"axios\";\r\nexport default {\r\n    // Gets all users using axios HTTP cliet GET call\r\n    getUsers: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=50&nat=uk\");\r\n    }\r\n};","import React from \"react\";\r\nimport Moment from 'react-moment';\r\nimport \"./style.css\";\r\n\r\nfunction Employee(props) {\r\n      return (\r\n        <table className=\"tableWorkers \">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th onClick = {props.sortName}>Name</th>\r\n                    <th>Phone</th>\r\n                    <th>E-mail</th>\r\n                    <th>DOB</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody className= \"\">\r\n                {props.employee.map(result => (\r\n                    <tr className=\"table\" key={result.login.uuid}>\r\n                     \r\n\r\n                        <td> <img src={result.picture.large} alt=\"\" /></td>\r\n                        <td>{result.name.first + \" \" + result.name.last}  </td>\r\n                        <td>{result.cell}</td>\r\n                        <td className=\"email\"><a href={result.email}>{result.email}</a></td>\r\n                        <td><Moment format=\"MM/DD/YYYY\">{result.dob.date}</Moment></td>\r\n\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table >\r\n    )\r\n\r\n}\r\n\r\nexport default Employee","import React from \"react\"\r\nimport \"./style.css\";\r\n\r\n// SearchBox define the Top Header, and the search box\r\nfunction SearchBox(props) {\r\n    return (\r\n            <header className=\"z-depth-3 col s12\">\r\n                    <div className=\"col c6 inputAndButton center-align\">\r\n                        <input\r\n                            onChange={props.handleInputChange}\r\n                        //     value = {props.values}\r\n                            type=\"text\"\r\n                            name=\"search\"\r\n                            className=\" inputBox \"\r\n                            placeholder=\"Search by name\" />\r\n                    </div>\r\n            </header>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from \"react\";\r\nimport \"./style.css\";\r\nimport terminal from \"./terminal.jpg\"\r\n\r\nfunction Header() {\r\n    return (\r\n<div className = \"wrapper\">\r\n    <div className = \"title\">\r\nEmployee Directory\r\n<img className = \"terminal\" src={terminal} alt=\"terminal\" width=\"100\" height=\"100\"></img>\r\n    </div>\r\n    <br></br>\r\n    <div className = \"tagline\">\r\nDetailed Employee info\r\n    </div>\r\n</div>\r\n\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport API from \"./utils/API\";\nimport Employee from \"./components/Employee\"\nimport SearchBox from \"./components/SearchBox\"\nimport Header from \"./components/Header\"\nimport './App.css';\n\n// Important to save the state of both Original list of employee, and FilteredEmployees\n// original employee list is needed; as the starting base that has all users, then user can add search filter.\n// filtered employee list State also needed to be stored, because of following reason:\n// Suppose if you add filter; and resulting in 5 x filtered employee\n// Then, you want to sort this 5 x filtered employees.\n// IF you save the state of 5 x employees for sort(); then sort() will perform sorting only on these 5 x employees\n// I.E: if you only have the state of all employee; your Sort() can only sort original list of employees\n// Not the filtered list. \nclass App extends React.Component {\n  state = {\n    employees: [],\n    filteredEmployees: [],\n    order: []\n  }\n\n  // When page first reload, both filtered and unfilter contain same worker list\n  componentDidMount() {\n    API.getUsers().then(res => this.setState({\n      employees: res.data.results,\n      filteredEmployees: res.data.results \n    })).catch(err => console.log(err))\n  }\n\n  // when input is changing it will dynamically show the associates names that \n  // match either firstname or Lastname\n  handleInputChange = event => {\n    const employees = this.state.employees;\n    const UserInput = event.target.value;\n    const filteredEmployees = employees.filter(employee => (employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1) ||\n      employee.name.last.toLowerCase().indexOf(UserInput.toLowerCase()) > -1)\n\n    console.log(\"handleInputChange called, filteredEmployees \", filteredEmployees);\n    this.setState({\n      filteredEmployees,\n\n    });\n  };\n\n  // Sort by First Name, using sort-compare function\n  // Compare will take two values at a time\n  // If \"a\" firstname is \"Samson\", \"b\" firtname is Amy\n  // a.firsname - b.firstname would yield +ve, since \"S\" > \"A\"\n  // +ve means True condition. and below, if true,  return +1 (Positive)\n  // The Sort() , when sees a +ve; will place the first item, \"a.firstname\" AFTER \"b.firstname\"\n  // That means samson put After Amy, which is a Ascending sort.\n  sortName = () => {\n    const filtereds = this.state.filteredEmployees;\n    if (this.state.order === \"asc\") {\n      const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\n      console.log(sorteds)\n\n      this.setState({\n        filteredEmployees: sorteds,\n        order: \"desc\"\n      })\n    } else {\n      // The default value of order is not set to \"acs\"; hence will take following logic:\n      // If \"a\" firstname is \"Samson\", \"b\" firtname is Amy\n      // a.firsname - b.firstname would yield +ve, since \"S\" > \"A\"\n      // +ve means True condition. and below, if true,  return -1 (negative)\n      // The Sort() , when sees a -ve; will place the first item, \"a.firstname\", before \"b.firstname\"\n      // That means samson put before Amy, which is a decending sort.\n      const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\n      console.log(sorteds)\n\n      this.setState({\n        filteredEmployees: sorteds,\n        order: \"asc\" // Toggle the order to be asc; so next time when click, is the opposite -> ASC\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n\n        <SearchBox\n          employee={this.state.employees}\n          handleInputChange={this.handleInputChange} />\n\n        <Employee\n          employee={this.state.filteredEmployees} \n          sortName={this.sortName} />\n      </div>\n\n    ) // render() return\n  } // render()\n}// end Class App\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}